<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Car HMI Control Panel</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #0c0c0c, #1a1a2e);
            color: #e0e0e0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        .dashboard {
            width: 100%;
            max-width: 1200px;
            background: linear-gradient(160deg, #16213e, #0f3460);
            border-radius: 25px;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.6);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            border: 1px solid #2a3a5a;
        }

        .header {
            background: linear-gradient(90deg, #1a1a2e, #16213e);
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid #2a3a5a;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo-icon {
            font-size: 28px;
            color: #4cc9f0;
        }

        .logo-text {
            font-size: 28px;
            font-weight: 700;
            background: linear-gradient(90deg, #4cc9f0, #4361ee);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .status-indicators {
            display: flex;
            gap: 25px;
        }

        .status {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 16px;
            padding: 8px 15px;
            background: rgba(30, 30, 60, 0.7);
            border-radius: 10px;
            border: 1px solid #2a3a5a;
        }

        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .active {
            background-color: #4ade80;
            box-shadow: 0 0 10px #4ade80;
        }

        .standby {
            background-color: #fbbf24;
            box-shadow: 0 0 10px #fbbf24;
        }

        .disabled {
            background-color: #ef4444;
            box-shadow: 0 0 10px #ef4444;
        }

        .main-content {
            display: flex;
            padding: 30px;
            gap: 30px;
            flex-wrap: wrap;
        }

        .left-panel {
            flex: 1;
            min-width: 350px;
            display: flex;
            flex-direction: column;
            gap: 25px;
        }

        .right-panel {
            flex: 2;
            min-width: 500px;
            display: flex;
            flex-direction: column;
            gap: 25px;
        }

        .panel {
            background: linear-gradient(145deg, #1a1a2e, #16213e);
            border-radius: 18px;
            padding: 20px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
            border: 1px solid #2a3a5a;
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .panel:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 20px rgba(0, 0, 0, 0.4);
        }

        .panel-title {
            font-size: 22px;
            margin-bottom: 20px;
            color: #90cdf4;
            border-bottom: 2px solid #2a3a5a;
            padding-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .panel-title i {
            color: #4cc9f0;
        }

        .cacc-controls, .lcc-controls, .parking-controls {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .control-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
        }

        .control-label {
            font-size: 16px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .control-label i {
            color: #4cc9f0;
            width: 20px;
        }

        .button-group {
            display: flex;
            gap: 12px;
        }

        .btn {
            padding: 10px 18px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }

        .btn-primary {
            background: linear-gradient(135deg, #4361ee, #3a0ca3);
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #3a56d4, #2e0a82);
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.3);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #4cc9f0, #4895ef);
            color: white;
        }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #3ab0d9, #3a7bd9);
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.3);
        }

        .btn-success {
            background: linear-gradient(135deg, #4ade80, #16a34a);
            color: white;
        }

        .btn-success:hover {
            background: linear-gradient(135deg, #3bc46d, #12803d);
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.3);
        }

        .btn-warning {
            background: linear-gradient(135deg, #fbbf24, #f59e0b);
            color: white;
        }

        .btn-warning:hover {
            background: linear-gradient(135deg, #e0a91a, #d97706);
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.3);
        }

        .btn-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
        }

        .btn-danger:hover {
            background: linear-gradient(135deg, #dc2626, #b91c1c);
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.3);
        }

        .btn:disabled {
            background: linear-gradient(135deg, #6b7280, #4b5563);
            color: #9ca3af;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn:disabled:hover {
            transform: none;
            box-shadow: none;
        }

        .speed-display {
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            background: rgba(30, 30, 60, 0.5);
            border-radius: 15px;
            border: 2px solid #2a3a5a;
        }

        .speed-value {
            font-size: 64px;
            font-weight: bold;
            background: linear-gradient(90deg, #4cc9f0, #4361ee);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 20px rgba(76, 201, 240, 0.3);
        }

        .speed-unit {
            font-size: 24px;
            color: #a5b4fc;
            margin-top: 10px;
        }

        .traffic-light-container {
            display: flex;
            justify-content: center;
            margin: 20px 0;
        }

        .traffic-light {
            width: 100px;
            height: 250px;
            background: linear-gradient(145deg, #1e1e1e, #2d2d2d);
            border-radius: 15px;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            padding: 20px 0;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.4);
            border: 2px solid #3a3a3a;
        }

        .light {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: #3a3a3a;
            transition: all 0.5s;
        }

        .light.active {
            box-shadow: 0 0 20px 8px currentColor;
        }

        .red.active {
            background-color: #ef4444;
        }

        .yellow.active {
            background-color: #fbbf24;
        }

        .green.active {
            background-color: #10b981;
        }

        .intersection-display {
            height: 250px;
            background: linear-gradient(145deg, #1a1a2e, #16213e);
            border-radius: 15px;
            position: relative;
            overflow: hidden;
            margin-top: 15px;
            border: 2px solid #2a3a5a;
        }

        .road {
            position: absolute;
            background: linear-gradient(90deg, #4b5563, #6b7280, #4b5563);
        }

        .horizontal-road {
            width: 100%;
            height: 50px;
            top: 100px;
        }

        .vertical-road {
            width: 50px;
            height: 100%;
            left: calc(50% - 25px);
        }

        .center-circle {
            position: absolute;
            width: 60px;
            height: 60px;
            background: #1a1a2e;
            border-radius: 50%;
            top: calc(50% - 30px);
            left: calc(50% - 30px);
            border: 2px solid #2a3a5a;
            z-index: 2;
        }

        .parking-spots {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
            gap: 15px;
        }

        .parking-spot {
            flex: 1;
            height: 50px;
            background: linear-gradient(145deg, #4b5563, #374151);
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
            border: 2px solid #6b7280;
        }

        .parking-spot.available {
            background: linear-gradient(145deg, #10b981, #059669);
            color: white;
            border: 2px solid #34d399;
        }

        .parking-spot.occupied {
            background: linear-gradient(145deg, #ef4444, #dc2626);
            color: white;
            border: 2px solid #f87171;
        }

        .parking-spot.selected {
            border: 3px solid #fbbf24;
            box-shadow: 0 0 15px #fbbf24;
            transform: scale(1.05);
        }

        .status-message {
            text-align: center;
            padding: 15px;
            margin-top: 15px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 500;
        }

        .status-info {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        }

        .status-warning {
            background: linear-gradient(135deg, #f59e0b, #d97706);
        }

        .status-success {
            background: linear-gradient(135deg, #10b981, #047857);
        }

        .status-error {
            background: linear-gradient(135deg, #ef4444, #b91c1c);
        }

        .slider-container {
            margin: 20px 0;
        }

        .slider-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-size: 16px;
        }

        .slider {
            width: 100%;
            height: 10px;
            -webkit-appearance: none;
            background: linear-gradient(90deg, #1e3a8a, #3b82f6, #1e3a8a);
            border-radius: 5px;
            outline: none;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #4cc9f0;
            cursor: pointer;
            border: 2px solid #1e3a8a;
            box-shadow: 0 0 10px rgba(76, 201, 240, 0.7);
        }

        .slider::-moz-range-thumb {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #4cc9f0;
            cursor: pointer;
            border: 2px solid #1e3a8a;
            box-shadow: 0 0 10px rgba(76, 201, 240, 0.7);
        }

        .footer {
            padding: 20px 30px;
            background: linear-gradient(90deg, #1a1a2e, #16213e);
            border-top: 2px solid #2a3a5a;
            display: flex;
            justify-content: space-between;
            font-size: 14px;
            color: #9ca3af;
        }

        .car-icon {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        @media (max-width: 1100px) {
            .main-content {
                flex-direction: column;
            }
            
            .left-panel, .right-panel {
                min-width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <div class="header">
            <div class="logo">
                <i class="fas fa-car-side logo-icon"></i>
                <div class="logo-text">AUTO DRIVE HMI</div>
            </div>
            <div class="status-indicators">
                <div class="status">
                    <div class="status-dot standby"></div>
                    <span>CACC: Standby</span>
                </div>
                <div class="status">
                    <div class="status-dot disabled"></div>
                    <span>LCC: Disabled</span>
                </div>
                <div class="status">
                    <div class="status-dot disabled"></div>
                    <span>Parking: Disabled</span>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="left-panel">
                <div class="panel">
                    <h3 class="panel-title"><i class="fas fa-robot"></i> CACC Controls</h3>
                    <div class="cacc-controls">
                        <div class="control-row">
                            <span class="control-label"><i class="fas fa-power-off"></i>CACC Enable</span>
                            <button id="caccEnable" class="btn btn-primary"><i class="fas fa-toggle-on"></i> Enable</button>
                        </div>
                        
                        <div class="speed-display">
                            <div class="speed-value">65</div>
                            <div class="speed-unit">MILES PER HOUR</div>
                        </div>
                        
                        <div class="control-row">
                            <span class="control-label"><i class="fas fa-tachometer-alt"></i>Speed Controls</span>
                            <div class="button-group">
                                <button id="resumeIncrease" class="btn btn-success" disabled><i class="fas fa-plus"></i> RES+</button>
                                <button id="setDecrease" class="btn btn-warning" disabled><i class="fas fa-minus"></i> SET-</button>
                            </div>
                        </div>
                        
                        <div class="control-row">
                            <span class="control-label"><i class="fas fa-times-circle"></i>Cancel CACC</span>
                            <button id="cancelCACC" class="btn btn-danger" disabled><i class="fas fa-ban"></i> Cancel</button>
                        </div>
                        
                        <div class="slider-container">
                            <div class="slider-label">
                                <span><i class="fas fa-ruler-horizontal"></i> Following Distance</span>
                                <span id="distanceValue">Medium</span>
                            </div>
                            <input type="range" min="1" max="3" value="2" class="slider" id="distanceSlider">
                        </div>
                    </div>
                </div>

                <div class="panel">
                    <h3 class="panel-title"><i class="fas fa-road"></i> LCC Controls</h3>
                    <div class="lcc-controls">
                        <div class="control-row">
                            <span class="control-label"><i class="fas fa-compass"></i>Lane Centering Control</span>
                            <button id="activateLCC" class="btn btn-primary" disabled><i class="fas fa-play"></i> Activate</button>
                        </div>
                        <div class="status-message status-info">
                            <i class="fas fa-info-circle"></i> CACC must be enabled to activate LCC
                        </div>
                    </div>
                </div>
            </div>

            <div class="right-panel">
                <div class="panel">
                    <h3 class="panel-title"><i class="fas fa-traffic-light"></i> Intersection Display</h3>
                    <div class="traffic-light-container">
                        <div class="traffic-light">
                            <div class="light red active"></div>
                            <div class="light yellow"></div>
                            <div class="light green"></div>
                        </div>
                    </div>
                    <div class="intersection-display">
                        <div class="road horizontal-road"></div>
                        <div class="road vertical-road"></div>
                        <div class="center-circle"></div>
                    </div>
                </div>

                <div class="panel">
                    <h3 class="panel-title"><i class="fas fa-parking"></i> Automatic Parking</h3>
                    <div class="parking-controls">
                        <div class="control-row">
                            <span class="control-label"><i class="fas fa-car"></i>Parking Controls</span>
                            <div class="button-group">
                                <button id="activateParking" class="btn btn-primary"><i class="fas fa-search"></i> Activate</button>
                                <button id="startParking" class="btn btn-success" disabled><i class="fas fa-play"></i> Start</button>
                                <button id="cancelParking" class="btn btn-danger" disabled><i class="fas fa-stop"></i> Cancel</button>
                                <button id="finishParking" class="btn btn-secondary" disabled><i class="fas fa-flag-checkered"></i> Finish</button>
                            </div>
                        </div>
                        
                        <div class="parking-spots">
                            <div class="parking-spot occupied">Occupied</div>
                            <div class="parking-spot available">Available</div>
                            <div class="parking-spot available">Available</div>
                            <div class="parking-spot occupied">Occupied</div>
                        </div>
                        
                        <div class="status-message status-info" id="parkingStatus">
                            <i class="fas fa-info-circle"></i> Press "Activate" to search for parking spots
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="footer">
            <div class="car-icon">
                <i class="fas fa-car"></i>
                <span>Vehicle Status: All Systems Operational</span>
            </div>
            <div>Last Update: <span id="timestamp">Just now</span></div>
        </div>
    </div>

    <script>
        // State management
        const state = {
            cacc: {
                enabled: false,
                active: false,
                setSpeed: 65,
                previousSpeed: 65
            },
            lcc: {
                enabled: false,
                active: false
            },
            parking: {
                active: false,
                searching: false,
                spotSelected: false,
                maneuverInProgress: false
            },
            trafficLight: 'red'
        };

        // DOM elements
        const caccEnableBtn = document.getElementById('caccEnable');
        const resumeIncreaseBtn = document.getElementById('resumeIncrease');
        const setDecreaseBtn = document.getElementById('setDecrease');
        const cancelCaccBtn = document.getElementById('cancelCACC');
        const activateLccBtn = document.getElementById('activateLCC');
        const activateParkingBtn = document.getElementById('activateParking');
        const startParkingBtn = document.getElementById('startParking');
        const cancelParkingBtn = document.getElementById('cancelParking');
        const finishParkingBtn = document.getElementById('finishParking');
        const speedValue = document.querySelector('.speed-value');
        const parkingStatus = document.getElementById('parkingStatus');
        const distanceSlider = document.getElementById('distanceSlider');
        const distanceValue = document.getElementById('distanceValue');
        const timestamp = document.getElementById('timestamp');

        // Update timestamp
        function updateTimestamp() {
            const now = new Date();
            timestamp.textContent = now.toLocaleTimeString();
        }

        // Update UI based on state
        function updateUI() {
            // CACC state
            if (state.cacc.enabled) {
                caccEnableBtn.innerHTML = '<i class="fas fa-toggle-on"></i> Disable';
                caccEnableBtn.classList.remove('btn-primary');
                caccEnableBtn.classList.add('btn-secondary');
                
                resumeIncreaseBtn.disabled = false;
                setDecreaseBtn.disabled = false;
                
                if (state.cacc.active) {
                    cancelCaccBtn.disabled = false;
                } else {
                    cancelCaccBtn.disabled = true;
                }
                
                // Update status indicator
                document.querySelectorAll('.status')[0].querySelector('.status-dot').className = 
                    state.cacc.active ? 'status-dot active' : 'status-dot standby';
                document.querySelectorAll('.status')[0].querySelector('span').textContent = 
                    state.cacc.active ? 'CACC: Active' : 'CACC: Standby';
            } else {
                caccEnableBtn.innerHTML = '<i class="fas fa-toggle-on"></i> Enable';
                caccEnableBtn.classList.remove('btn-secondary');
                caccEnableBtn.classList.add('btn-primary');
                
                resumeIncreaseBtn.disabled = true;
                setDecreaseBtn.disabled = true;
                cancelCaccBtn.disabled = true;
                
                // Update status indicator
                document.querySelectorAll('.status')[0].querySelector('.status-dot').className = 'status-dot disabled';
                document.querySelectorAll('.status')[0].querySelector('span').textContent = 'CACC: Disabled';
            }
            
            // LCC state
            if (state.cacc.enabled) {
                activateLccBtn.disabled = false;
                
                if (state.lcc.active) {
                    activateLccBtn.innerHTML = '<i class="fas fa-stop"></i> Cancel LCC';
                    activateLccBtn.classList.remove('btn-primary');
                    activateLccBtn.classList.add('btn-danger');
                    
                    // Update status indicator
                    document.querySelectorAll('.status')[1].querySelector('.status-dot').className = 'status-dot active';
                    document.querySelectorAll('.status')[1].querySelector('span').textContent = 'LCC: Active';
                } else {
                    activateLccBtn.innerHTML = '<i class="fas fa-play"></i> Activate LCC';
                    activateLccBtn.classList.remove('btn-danger');
                    activateLccBtn.classList.add('btn-primary');
                    
                    // Update status indicator
                    document.querySelectorAll('.status')[1].querySelector('.status-dot').className = 
                        state.cacc.enabled ? 'status-dot standby' : 'status-dot disabled';
                    document.querySelectorAll('.status')[1].querySelector('span').textContent = 
                        state.cacc.enabled ? 'LCC: Standby' : 'LCC: Disabled';
                }
            } else {
                activateLccBtn.disabled = true;
                
                // Update status indicator
                document.querySelectorAll('.status')[1].querySelector('.status-dot').className = 'status-dot disabled';
                document.querySelectorAll('.status')[1].querySelector('span').textContent = 'LCC: Disabled';
            }
            
            // Parking state - CORRECTED LOGIC
            if (state.parking.active && !state.parking.maneuverInProgress) {
                // Activated but not started - show Start and Cancel buttons
                activateParkingBtn.disabled = true;
                startParkingBtn.disabled = false;
                cancelParkingBtn.disabled = false;
                finishParkingBtn.disabled = true;
                
                // Update status indicator
                document.querySelectorAll('.status')[2].querySelector('.status-dot').className = 'status-dot standby';
                document.querySelectorAll('.status')[2].querySelector('span').textContent = 'Parking: Standby';
            } else if (state.parking.maneuverInProgress) {
                // Maneuver in progress - show Cancel and Finish buttons (Start stays enabled)
                activateParkingBtn.disabled = true;
                startParkingBtn.disabled = false;
                cancelParkingBtn.disabled = false;
                finishParkingBtn.disabled = false;
                
                // Update status indicator
                document.querySelectorAll('.status')[2].querySelector('.status-dot').className = 'status-dot active';
                document.querySelectorAll('.status')[2].querySelector('span').textContent = 'Parking: Active';
            } else {
                // Inactive state
                activateParkingBtn.disabled = false;
                startParkingBtn.disabled = true;
                cancelParkingBtn.disabled = true;
                finishParkingBtn.disabled = true;
                
                // Update status indicator
                document.querySelectorAll('.status')[2].querySelector('.status-dot').className = 'status-dot disabled';
                document.querySelectorAll('.status')[2].querySelector('span').textContent = 'Parking: Disabled';
            }
            
            // Update speed display
            speedValue.textContent = state.cacc.setSpeed;
            
            updateTimestamp();
        }

        // Event listeners
        caccEnableBtn.addEventListener('click', function() {
            state.cacc.enabled = !state.cacc.enabled;
            if (!state.cacc.enabled) {
                state.cacc.active = false;
                state.lcc.active = false;
                state.cacc.setSpeed = 65; // Reset to default
            }
            updateUI();
        });

        resumeIncreaseBtn.addEventListener('click', function() {
            if (!state.cacc.active) {
                // Activate CACC with previous speed
                state.cacc.active = true;
                state.cacc.setSpeed = state.cacc.previousSpeed;
            } else {
                // Increase speed by 1 mph
                state.cacc.setSpeed += 1;
            }
            updateUI();
        });

        setDecreaseBtn.addEventListener('click', function() {
            if (!state.cacc.active) {
                // Activate CACC with current speed
                state.cacc.active = true;
                state.cacc.previousSpeed = state.cacc.setSpeed;
            } else {
                // Decrease speed by 1 mph
                state.cacc.setSpeed = Math.max(0, state.cacc.setSpeed - 1);
            }
            updateUI();
        });

        cancelCaccBtn.addEventListener('click', function() {
            state.cacc.active = false;
            state.lcc.active = false;
            updateUI();
        });

        activateLccBtn.addEventListener('click', function() {
            if (state.lcc.active) {
                state.lcc.active = false;
            } else {
                state.lcc.active = true;
            }
            updateUI();
        });

        // CORRECTED PARKING CONTROL LOGIC
        activateParkingBtn.addEventListener('click', function() {
            state.parking.active = true;
            state.parking.searching = true;
            
            // Enable Start and Cancel buttons immediately upon activation
            startParkingBtn.disabled = false;
            cancelParkingBtn.disabled = false;
            
            parkingStatus.innerHTML = '<i class="fas fa-search"></i> Searching for parking spots...';
            parkingStatus.className = 'status-message status-warning';
            
            // Simulate finding parking spots after a delay
            setTimeout(() => {
                state.parking.searching = false;
                state.parking.spotSelected = true;
                parkingStatus.innerHTML = '<i class="fas fa-check-circle"></i> Parking spots detected. Press "Start" to begin parking.';
                parkingStatus.className = 'status-message status-success';
                updateUI();
            }, 2000);
            
            updateUI();
        });

        startParkingBtn.addEventListener('click', function() {
            state.parking.maneuverInProgress = true;
            // Start button should NOT be disabled after starting
            startParkingBtn.disabled = false;
            finishParkingBtn.disabled = false;
            parkingStatus.innerHTML = '<i class="fas fa-car-side"></i> Parking maneuver in progress. Press "Finish" when complete.';
            parkingStatus.className = 'status-message status-warning';
            updateUI();
        });

        cancelParkingBtn.addEventListener('click', function() {
            // Reset all parking states
            state.parking.active = false;
            state.parking.searching = false;
            state.parking.spotSelected = false;
            state.parking.maneuverInProgress = false;
            
            // Reset buttons to initial state
            startParkingBtn.disabled = true;
            cancelParkingBtn.disabled = true;
            finishParkingBtn.disabled = true;
            
            parkingStatus.innerHTML = '<i class="fas fa-info-circle"></i> Parking canceled. Press "Activate" to search again.';
            parkingStatus.className = 'status-message status-info';
            updateUI();
        });

        finishParkingBtn.addEventListener('click', function() {
            // Complete parking maneuver
            state.parking.active = false;
            state.parking.searching = false;
            state.parking.spotSelected = false;
            state.parking.maneuverInProgress = false;
            
            // Reset all buttons
            startParkingBtn.disabled = true;
            cancelParkingBtn.disabled = true;
            finishParkingBtn.disabled = true;
            
            parkingStatus.innerHTML = '<i class="fas fa-flag-checkered"></i> Parking completed successfully!';
            parkingStatus.className = 'status-message status-success';
            
            // Reset status after 3 seconds
            setTimeout(() => {
                parkingStatus.innerHTML = '<i class="fas fa-info-circle"></i> Press "Activate" to search for parking spots';
                parkingStatus.className = 'status-message status-info';
                updateUI();
            }, 3000);
            
            updateUI();
        });

        distanceSlider.addEventListener('input', function() {
            const values = ['Short', 'Medium', 'Long'];
            distanceValue.textContent = values[this.value - 1];
        });

        // Traffic light simulation
        function simulateTrafficLight() {
            const lights = document.querySelectorAll('.light');
            let currentLight = 0;
            
            setInterval(() => {
                lights.forEach(light => light.classList.remove('active'));
                
                if (currentLight === 0) {
                    lights[0].classList.add('active'); // Red
                    state.trafficLight = 'red';
                } else if (currentLight === 1) {
                    lights[1].classList.add('active'); // Yellow
                    state.trafficLight = 'yellow';
                } else {
                    lights[2].classList.add('active'); // Green
                    state.trafficLight = 'green';
                }
                
                currentLight = (currentLight + 1) % 3;
            }, 3000);
        }

        // Initialize
        updateUI();
        simulateTrafficLight();
        setInterval(updateTimestamp, 60000); // Update timestamp every minute
    </script>
</body>
</html>